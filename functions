# create a new directory and enter it.
mkd() {
  mkdir -p "$@" && cd "$@"
  }

# update, upgrade, write to log and clean up.
update_system() {
  sudo apt-get update
  sudo apt-get -y upgrade
  installdate=$(date +"%Y-%m-%d")
  echo -e "$installdate Installed package $1" >> ~/system-changelog.txt
  sudo apt-get autoremove
  }

# colored man pages (via less):
man() {
    env LESS_TERMCAP_mb=$'\E[01;31m' \
    LESS_TERMCAP_md=$'\E[01;38;5;74m' \
    LESS_TERMCAP_me=$'\E[0m' \
    LESS_TERMCAP_se=$'\E[0m' \
    LESS_TERMCAP_so=$'\E[38;5;246m' \
    LESS_TERMCAP_ue=$'\E[0m' \
    LESS_TERMCAP_us=$'\E[04;38;5;146m' \
    man "$@"
    }

hist_sum() {
    history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10
    }

mpv_twitch() { 
    mpv --ytdl "https://twitch.tv/$1"; 
    }

# Git General Functions

# display a random Git tip using "git-tips" Git repo and jq -- https://stedolan.github.io/jq/
# can add a -M option to the last line jq command of the function to disable the coloured output.
random_git_tip() {
  tips_index=( $(seq 0 $(jq "length" ~/.git-tips/tips.json) | sort -R | head -1) )
  echo "--------------------------------------------------------------"
  jq ".[$tips_index] | .title, .tip" ~/.git-tips/tips.json
}

# Git Alias Misc Functions

# the current branch name
# usage example: git pull origin $(current_branch)
# using '--quiet' with 'symbolic-ref' will not cause a fatal error (128) if
# it's not a symbolic ref, but in a Git repo.
function current_branch() {
  local ref
  ref=$($_omz_git_git_cmd symbolic-ref --quiet HEAD 2> /dev/null)
  local ret=$?
  if [[ $ret != 0 ]]; then
    [[ $ret == 128 ]] && return  # no git repo.
    ref=$($_omz_git_git_cmd rev-parse --short HEAD 2> /dev/null) || return
  fi
  echo ${ref#refs/heads/}
}
# the list of remotes
function current_repository() {
  if ! $_omz_git_git_cmd rev-parse --is-inside-work-tree &> /dev/null; then
    return
  fi
  echo $($_omz_git_git_cmd remote -v | cut -d':' -f 2)
}
# pretty log messages
function _git_log_prettily(){
  if ! [ -z $1 ]; then
    git log --pretty=$1
  fi
}
# warn if the current branch is a WIP
function work_in_progress() {
  if $(git log -n 1 2>/dev/null | grep -q -c "\-\-wip\-\-"); then
    echo "WIP!!"
  fi
}
